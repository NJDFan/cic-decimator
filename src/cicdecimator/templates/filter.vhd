------------------------------------------------------------------------
-- CIC Decimator
--
-- Stages: {{ stages }}
-- Decimation Ratio: {{ ratio }}
-- Input Data Range: {{ stage_min[0] }}-{{ stage_max[0] }}
-- Output Data Range: {{ stage_min[-1] }}-{{ stage_max[-1] }}
--
-- Generated {{ now }}
-- Generated by Rob Gaddi's {{ program }}.
--
-- This file is a generated output product, and is unencumbered by
-- any license restrictions that may appear in the {{ program }}
-- license; see LICENSE.TXT for more details.
------------------------------------------------------------------------

-- This file is expected to appear in library {{ work }} 

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity {{ name }}
    port (
        in_data     : in  {{ stage_dtype[0] }};
        in_valid    : in  std_logic;
        out_data    : out {{ stage_dtype[-1] }};
        out_valid   : out std_logic;
    
        clk : in std_logic;
        {{ "arst" if async_reset else "rst" }} : in std_logic
    );
end entity {{ name }}

architecture Behavioral of {{ name }} is

    signal output_ready : std_logic_vector({{ stages-1 }} downto 0);
    
    {% for dt in stage_dtype %}
    signal data{{loop.index0}} : {{dt}};
    {% endfor %}

begin

    data0 <= in_data;
    
    UPDATE_DATA: process(clk {{", arst" if async_reset}})
    begin
        {% if async_reset %}
        if (arst = '1') then
            output_ready <= (others => '0');
            -- TODO stages
        elsif rising_edge(clk) then
        {% else %}
        if rising_edge(clk) then
        {% endif %}
        
            {% if stages > 1 %} 
            output_ready <= output_ready({{stages-2}} downto 0) & in_valid;
            {% else %}
            output_ready <= in_valid;
            {% endif %}
            
            {% if not async_reset %}
            if rst = '1' then
                output_ready <= (others => '0');
                -- TODO stages
            end if;
            {% endif %}
            
        end if;
    end process UPDATE_DATA;
    
    out_data  <= data{{ stages-1 }};
    out_valid <= output_ready({{ stages-1 }})

end architecture Behavioral;
